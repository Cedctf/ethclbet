{
  "address": "0x6E005eDE5f15b8df8c2d4dD191b27DE42dE0b0e2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "A13e_RevokedAuthToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_AddressMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_ChainIdMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_DomainMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweAuth_NotBeforeInFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweParser_InvalidAddressLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SiweParser_InvalidNonce",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SimpleBet.BetOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "BetPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum SimpleBet.BetStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "BetResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_betMetas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum SimpleBet.BetOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "internalType": "enum SimpleBet.BetStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        }
      ],
      "name": "cancelBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getAllBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum SimpleBet.BetOutcome",
              "name": "outcome",
              "type": "uint8"
            },
            {
              "internalType": "enum SimpleBet.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct SimpleBet.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "betIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        }
      ],
      "name": "getBetSecret",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getUserBets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum SimpleBet.BetOutcome",
              "name": "outcome",
              "type": "uint8"
            },
            {
              "internalType": "enum SimpleBet.BetStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct SimpleBet.Bet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "siweMsg",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            }
          ],
          "internalType": "struct SignatureRSV",
          "name": "sig",
          "type": "tuple"
        }
      ],
      "name": "login",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        }
      ],
      "name": "ownerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum SimpleBet.BetOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "secretData",
          "type": "bytes"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "betId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "token",
          "type": "bytes"
        }
      ],
      "name": "resolveBet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd49f31ca930c16765b07d8ee323a560b33e2308937a4561f2f41de821a8c8f8e",
  "receipt": {
    "to": null,
    "from": "0x8fdd8FF672BEf99e33A1F821ECDC57571391e9B5",
    "contractAddress": "0x6E005eDE5f15b8df8c2d4dD191b27DE42dE0b0e2",
    "transactionIndex": 0,
    "gasUsed": "3536653",
    "logsBloom": "0x
    "blockHash": "0x7c97e58ce37e10462eddd30904e7f52d4e444264935b6f427d539b96c23c32a9",
    "transactionHash": "0xd49f31ca930c16765b07d8ee323a560b33e2308937a4561f2f41de821a8c8f8e",
    "logs": [],
    "blockNumber": 12891276,
    "cumulativeGasUsed": "3536653",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "testnet.sapphire.oasis.io"
  ],
  "numDeployments": 1,
  "solcInputHash": "1da90d69c1bb29d92a13f70a5bf8016c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"A13e_RevokedAuthToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_AddressMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_ChainIdMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_DomainMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_NotBeforeInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweParser_InvalidAddressLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweParser_InvalidNonce\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"BetResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_betMetas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getAllBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct SimpleBet.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"getBetSecret\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getUserBets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"enum SimpleBet.BetStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct SimpleBet.Bet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"siweMsg\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureRSV\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"login\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SimpleBet.BetOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secretData\",\"type\":\"bytes\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"resolveBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple betting smart contract with SiweAuth integration for Oasis Sapphire Users can place bets, contract acts as escrow, and owner can manage funds\",\"kind\":\"dev\",\"methods\":{\"cancelBet(uint256,bytes)\":{\"details\":\"Cancel a bet and refund (only owner)\",\"params\":{\"betId\":\"The bet ID to cancel\",\"token\":\"SIWE authentication token for owner\"}},\"domain()\":{\"returns\":{\"_0\":\"The domain string\"}},\"getAllBets(uint256,uint256)\":{\"details\":\"Get all bet metadata (paginated)\",\"params\":{\"count\":\"Number of bets to return\",\"offset\":\"Pagination offset\"}},\"getBetSecret(uint256,bytes)\":{\"details\":\"Get secret data for a specific bet (only bet owner can access)\",\"params\":{\"betIndex\":\"Index of the bet in the _betMetas array\",\"token\":\"SIWE authentication token\"}},\"getContractBalance()\":{\"details\":\"Get contract balance\"},\"getOwner()\":{\"details\":\"Get owner address\"},\"getTotalBets()\":{\"details\":\"Get total number of bets\"},\"getUserBetCount(address)\":{\"details\":\"Get user's total bet count\",\"params\":{\"user\":\"User address\"}},\"getUserBets(bytes,uint256,uint256)\":{\"details\":\"Get user's bets using SIWE authentication\",\"params\":{\"count\":\"Number of bets to return\",\"offset\":\"Pagination offset\",\"token\":\"SIWE authentication token\"}},\"login(string,(bytes32,bytes32,uint256))\":{\"params\":{\"sig\":\"The signature of the SIWE message\",\"siweMsg\":\"The signed SIWE message\"},\"returns\":{\"_0\":\"The encrypted authentication token\"}},\"ownerWithdraw(uint256,bytes)\":{\"details\":\"Owner withdraws contract funds (only owner)\",\"params\":{\"amount\":\"Amount to withdraw\",\"token\":\"SIWE authentication token for owner\"}},\"placeBet(uint8,string,bytes)\":{\"details\":\"Place a bet with amount and outcome\",\"params\":{\"description\":\"Public description of the bet\",\"outcome\":\"The outcome to bet on (YES/NO)\",\"secretData\":\"Private data associated with the bet\"}},\"resolveBet(uint256,bool,bytes)\":{\"details\":\"Resolve a bet (only owner)\",\"params\":{\"betId\":\"The bet ID to resolve\",\"token\":\"SIWE authentication token for owner\",\"won\":\"Whether the bet won or lost\"}},\"withdrawBalance()\":{\"details\":\"Withdraw user balance\"}},\"title\":\"SimpleBet\",\"version\":1},\"userdoc\":{\"errors\":{\"A13e_RevokedAuthToken()\":[{\"notice\":\"The authentication token was revoked\"}],\"SiweAuth_AddressMismatch()\":[{\"notice\":\"User address in the SIWE message does not match the message signer's address\"}],\"SiweAuth_ChainIdMismatch()\":[{\"notice\":\"Chain ID in the SIWE message does not match the actual chain ID\"}],\"SiweAuth_DomainMismatch()\":[{\"notice\":\"Domain in the SIWE message does not match the domain of a dApp\"}],\"SiweAuth_Expired()\":[{\"notice\":\"Validity of the authentication token or the Expires value in the SIWE message is in the past\"}],\"SiweAuth_NotBeforeInFuture()\":[{\"notice\":\"The Not before value in the SIWE message is still in the future\"}],\"SiweParser_InvalidAddressLength()\":[{\"notice\":\"Invalid length of the hex-encoded address\"}],\"SiweParser_InvalidNonce()\":[{\"notice\":\"Invalid length of the nonce\"}]},\"kind\":\"user\",\"methods\":{\"domain()\":{\"notice\":\"Return the domain associated with the dApp.\"},\"login(string,(bytes32,bytes32,uint256))\":{\"notice\":\"Login using a SIWE message and signature\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleBet.sol\":\"SimpleBet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@oasisprotocol/sapphire-contracts/contracts/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Utility for converting date and time to timestamp\\n * @notice Considers leap year, but not leap second.\\n * @custom:attribution https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\\n */\\nlibrary DateTime {\\n    uint16 private constant ORIGIN_YEAR = 1970;\\n\\n    function isLeapYear(uint16 year) internal pure returns (bool) {\\n        if (year % 4 != 0) {\\n            return false;\\n        }\\n        if (year % 100 != 0) {\\n            return true;\\n        }\\n        if (year % 400 != 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Convert year, month, day, hour, minute, second to Unix timestamp.\\n     * @dev Leap second is not supported.\\n     */\\n    function toTimestamp(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day,\\n        uint8 hour,\\n        uint8 minute,\\n        uint8 second\\n    ) internal pure returns (uint256 timestamp) {\\n        uint16 i;\\n\\n        // Year\\n        // TODO: Rewrite to O(1) time implementation.\\n        for (i = ORIGIN_YEAR; i < year; i++) {\\n            if (isLeapYear(i)) {\\n                timestamp += 366 days;\\n            } else {\\n                timestamp += 365 days;\\n            }\\n        }\\n\\n        // Month\\n        // TODO: Use constants for monthDayCounts (hex-encoded string?), rewrite to O(1) time implementation.\\n        uint32[12] memory monthDayCounts;\\n        monthDayCounts[0] = 31;\\n        if (isLeapYear(year)) {\\n            monthDayCounts[1] = 29;\\n        } else {\\n            monthDayCounts[1] = 28;\\n        }\\n        monthDayCounts[2] = 31;\\n        monthDayCounts[3] = 30;\\n        monthDayCounts[4] = 31;\\n        monthDayCounts[5] = 30;\\n        monthDayCounts[6] = 31;\\n        monthDayCounts[7] = 31;\\n        monthDayCounts[8] = 30;\\n        monthDayCounts[9] = 31;\\n        monthDayCounts[10] = 30;\\n        monthDayCounts[11] = 31;\\n\\n        for (i = 1; i < month; i++) {\\n            timestamp += monthDayCounts[i - 1] * 1 days;\\n        }\\n\\n        // Day\\n        timestamp += uint32(day - 1) * 1 days;\\n\\n        // Hour\\n        timestamp += uint32(hour) * 1 hours;\\n\\n        // Minute\\n        timestamp += uint16(minute) * 1 minutes;\\n\\n        // Second\\n        timestamp += second;\\n\\n        return timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x16056b81d29bc53c50a27a243d5215f21e164b2f95b4031bed6686fa83d02b73\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/EthereumUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {Sapphire} from \\\"./Sapphire.sol\\\";\\n\\nstruct SignatureRSV {\\n    bytes32 r;\\n    bytes32 s;\\n    uint256 v;\\n}\\n\\nlibrary EthereumUtils {\\n    uint256 internal constant K256_P =\\n        0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\\n\\n    // (p+1)//4\\n    uint256 internal constant K256_P_PLUS_1_OVER_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c;\\n\\n    address internal constant PRECOMPILE_BIGMODEXP = address(0x5);\\n\\n    error expmod_Error();\\n\\n    function expmod(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal view returns (uint256 out) {\\n        (bool success, bytes memory result) = PRECOMPILE_BIGMODEXP.staticcall(\\n            abi.encodePacked(\\n                uint256(0x20), // length of base\\n                uint256(0x20), // length of exponent\\n                uint256(0x20), // length of modulus\\n                base,\\n                exponent,\\n                modulus\\n            )\\n        );\\n\\n        if (!success) revert expmod_Error();\\n\\n        out = uint256(bytes32(result));\\n    }\\n\\n    error k256DeriveY_Invalid_Prefix_Error();\\n\\n    /**\\n     * @notice Recover Y coordinate from X coordinate and sign bit.\\n     * @param prefix 0x02 or 0x03 indicates sign bit of compressed point.\\n     * @param x X coordinate.\\n     */\\n    function k256DeriveY(uint8 prefix, uint256 x)\\n        internal\\n        view\\n        returns (uint256 y)\\n    {\\n        if (prefix != 0x02 && prefix != 0x03)\\n            revert k256DeriveY_Invalid_Prefix_Error();\\n\\n        // x^3 + ax + b, where a=0, b=7\\n        y = addmod(mulmod(x, mulmod(x, x, K256_P), K256_P), 7, K256_P);\\n\\n        // find square root of quadratic residue\\n        y = expmod(y, K256_P_PLUS_1_OVER_4, K256_P);\\n\\n        // negate y if indicated by sign bit\\n        if ((y + prefix) % 2 != 0) {\\n            y = K256_P - y;\\n        }\\n    }\\n\\n    error k256Decompress_Invalid_Length_Error();\\n\\n    /**\\n     * @notice Decompress SEC P256 k1 point.\\n     * @param pk 33 byte compressed public key.\\n     * @return x X coordinate.\\n     * @return y Y coordinate.\\n     */\\n    function k256Decompress(bytes memory pk)\\n        internal\\n        view\\n        returns (uint256 x, uint256 y)\\n    {\\n        if (pk.length != 33) revert k256Decompress_Invalid_Length_Error();\\n        assembly {\\n            // skip 32 byte length prefix, plus one byte sign prefix\\n            x := mload(add(pk, 33))\\n        }\\n        y = k256DeriveY(uint8(pk[0]), x);\\n    }\\n\\n    function k256PubkeyToEthereumAddress(bytes memory pubkey)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        (uint256 x, uint256 y) = k256Decompress(pubkey);\\n        return toEthereumAddress(x, y);\\n    }\\n\\n    /**\\n     * @notice Convert SEC P256 k1 curve point to Ethereum address.\\n     * @param x X coordinate.\\n     * @param y Y coordinate.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 212)\\n     */\\n    function toEthereumAddress(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        bytes32 digest = keccak256(abi.encodePacked(x, y));\\n\\n        return address(uint160((uint256(digest) << 96) >> 96));\\n    }\\n\\n    error DER_Split_Error();\\n\\n    /**\\n     * @notice Extracts the `r` and `s` parameters from a DER encoded ECDSA\\n     * signature.\\n     *\\n     * The signature is an ASN1 encoded SEQUENCE of the variable length `r` and\\n     * `s` INTEGERs.\\n     *\\n     * ```\\n     * | 0x30 | len(z) | 0x02 | len(r) |  r   | 0x02 | len(s) |  s   | = hex value\\n     * |  1   |   1    |   1  |   1    | 1-33 |  1   |   1    | 1-33 | = byte length\\n     * ```\\n     *\\n     * If the highest bit of either `r` or `s` is set, it will be prefix padded\\n     * with a zero byte. There is exponentially decreasing probability that\\n     * either `r` or `s` will be below 32 bytes. There is a very high\\n     * probability that either `r` or `s` will be 33 bytes. This function only\\n     * works if either `r` or `s` are 256bits or lower.\\n     *\\n     * @param der DER encoded ECDSA signature\\n     * @return rsv ECDSA R point X coordinate, and S scalar\\n     * @custom:see https://bitcoin.stackexchange.com/questions/58853/how-do-you-figure-out-the-r-and-s-out-of-a-signature-using-python\\n     */\\n    function splitDERSignature(bytes memory der)\\n        internal\\n        pure\\n        returns (SignatureRSV memory rsv)\\n    {\\n        if (der.length < 8) revert DER_Split_Error();\\n        if (der[0] != 0x30) revert DER_Split_Error();\\n        if (der[2] != 0x02) revert DER_Split_Error();\\n\\n        uint256 zLen = uint8(der[1]);\\n        uint256 rLen = uint8(der[3]);\\n        if (rLen > 33) revert DER_Split_Error();\\n\\n        uint256 sOffset = 4 + rLen;\\n        uint256 sLen = uint8(der[sOffset + 1]);\\n        if (sLen > 33) revert DER_Split_Error();\\n        if (der[sOffset] != 0x02) revert DER_Split_Error();\\n\\n        if (rLen + sLen + 4 != zLen) revert DER_Split_Error();\\n        if (der.length != zLen + 2) revert DER_Split_Error();\\n\\n        sOffset += 2;\\n        uint256 rOffset = 4;\\n\\n        if (rLen == 33) {\\n            if (der[4] != 0x00) revert DER_Split_Error();\\n            rOffset += 1;\\n            rLen -= 1;\\n        }\\n\\n        if (sLen == 33) {\\n            if (der[sOffset] != 0x00) revert DER_Split_Error();\\n            sOffset += 1;\\n            sLen -= 1;\\n        }\\n\\n        bytes32 r;\\n        bytes32 s;\\n\\n        assembly {\\n            r := mload(add(der, add(32, rOffset)))\\n            s := mload(add(der, add(32, sOffset)))\\n        }\\n\\n        // When length of either `r` or `s` is below 32 bytes\\n        // the 32 byte `mload` will suffix it with unknown stuff\\n        // shift right to remove the unknown stuff, prefixing with zeros instead\\n\\n        if (rLen < 32) {\\n            r >>= 8 * (32 - rLen);\\n        }\\n\\n        if (sLen < 32) {\\n            s >>= 8 * (32 - sLen);\\n        }\\n\\n        rsv.r = r;\\n        rsv.s = s;\\n    }\\n\\n    error recoverV_Error();\\n\\n    function recoverV(\\n        address pubkeyAddr,\\n        bytes32 digest,\\n        SignatureRSV memory rsv\\n    ) internal pure {\\n        rsv.v = 27;\\n\\n        if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n            rsv.v = 28;\\n\\n            if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n                revert recoverV_Error();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert a Secp256k1PrehashedKeccak256 signature to one accepted\\n     * by ecrecover.\\n     * @param pubkey 33 byte compressed public key.\\n     * @param digest 32 byte pre-hashed message digest.\\n     * @param signature ASN.1 DER encoded signature, as returned from\\n     * [`Sapphire.sign`](../Sapphire.sol/library.Sapphire.md#sign).\\n     * @return pubkeyAddr 20 byte Ethereum address.\\n     * @return rsv Ethereum EcDSA RSV signature values.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 206)\\n     */\\n    function toEthereumSignature(\\n        bytes memory pubkey,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view returns (address pubkeyAddr, SignatureRSV memory rsv) {\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pubkey);\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    function sign(\\n        address pubkeyAddr,\\n        bytes32 secretKey,\\n        bytes32 digest\\n    ) internal view returns (SignatureRSV memory rsv) {\\n        bytes memory signature = Sapphire.sign(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            abi.encodePacked(secretKey),\\n            abi.encodePacked(digest),\\n            \\\"\\\"\\n        );\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    /**\\n     * @notice Generate an Ethereum compatible SEC P256 k1 keypair and\\n     * corresponding public address.\\n     * @return pubkeyAddr Ethereum address.\\n     * @return secretKey Secret key used for signing.\\n     */\\n    function generateKeypair()\\n        internal\\n        view\\n        returns (address pubkeyAddr, bytes32 secretKey)\\n    {\\n        bytes memory randSeed = Sapphire.randomBytes(32, \\\"\\\");\\n\\n        secretKey = bytes32(randSeed);\\n\\n        (bytes memory pk, ) = Sapphire.generateSigningKeyPair(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            randSeed\\n        );\\n\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pk);\\n    }\\n}\\n\",\"keccak256\":\"0x79e34844793f4a8970d31eb4cbdd91e060fb93da4cbd28b7b8aad5c22e1f6666\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Sapphire\\n * @notice This library provides a number of convenient wrappers for\\n * cryptographic operations such as the x25519 key derivation, Deoxys-II-based\\n * encryption and decryption, signing key generation, message digest signing and\\n * verification, gas padding and hashing.\\n *\\n * Most of the mentioned functions are implemented as Sapphire's precompiles and\\n * are cheap to call.\\n *\\n * #### Calling Precompiles Manually\\n *\\n * You can override the wrappers and call Sapphire precompiles by dispatching\\n * calls to specific well-known contract addresses, as described below. The\\n * __Precompile address__ section of each function will show you the address\\n * of the corresponding precompile.\\n *\\n * Input parameters should be packed into a contiguous memory region with each\\n * chunk of data padded to 32 bytes as usual. The recommended way to construct\\n * parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`,\\n * which will transparently handle things like putting `bytes` lengths in the\\n * correct position.\\n */\\nlibrary Sapphire {\\n    // Oasis-specific, confidential precompiles\\n    address internal constant RANDOM_BYTES =\\n        0x0100000000000000000000000000000000000001;\\n    address internal constant DERIVE_KEY =\\n        0x0100000000000000000000000000000000000002;\\n    address internal constant ENCRYPT =\\n        0x0100000000000000000000000000000000000003;\\n    address internal constant DECRYPT =\\n        0x0100000000000000000000000000000000000004;\\n    address internal constant GENERATE_SIGNING_KEYPAIR =\\n        0x0100000000000000000000000000000000000005;\\n    address internal constant SIGN_DIGEST =\\n        0x0100000000000000000000000000000000000006;\\n    address internal constant VERIFY_DIGEST =\\n        0x0100000000000000000000000000000000000007;\\n    address internal constant CURVE25519_PUBLIC_KEY =\\n        0x0100000000000000000000000000000000000008;\\n    address internal constant GAS_USED =\\n        0x0100000000000000000000000000000000000009;\\n    address internal constant PAD_GAS =\\n        0x010000000000000000000000000000000000000a;\\n\\n    // Oasis-specific, general precompiles\\n    address internal constant SHA512_256 =\\n        0x0100000000000000000000000000000000000101;\\n    address internal constant SHA512 =\\n        0x0100000000000000000000000000000000000102;\\n    address internal constant SHA384 =\\n        0x0100000000000000000000000000000000000104;\\n\\n    type Curve25519PublicKey is bytes32;\\n    type Curve25519SecretKey is bytes32;\\n\\n    enum SigningAlg {\\n        /// Ed25519 signature over the provided message using SHA-512/265 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Ed25519Oasis,\\n        /// Ed25519 signature over the provided message.\\n        Ed25519Pure,\\n        /// Ed25519 signature over the provided prehashed SHA-512 digest.\\n        Ed25519PrehashedSha512,\\n        /// Secp256k1 signature over the provided message using SHA-512/256 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Secp256k1Oasis,\\n        /// Secp256k1 over the provided Keccak256 digest.\\n        /// Can be used to sign transactions for Ethereum-compatible networks.\\n        Secp256k1PrehashedKeccak256,\\n        /// Secp256k1 signature over the provided SHA-256 digest.\\n        Secp256k1PrehashedSha256,\\n        /// Sr25519 signature over the provided message.\\n        Sr25519,\\n        /// Secp256r1 signature over the provided SHA-256 digest.\\n        Secp256r1PrehashedSha256,\\n        /// Secp384r1 signature over the provided SHA-384 digest.\\n        Secp384r1PrehashedSha384\\n    }\\n\\n    /**\\n     * @notice Generate `num_bytes` pseudo-random bytes, with an optional\\n     * personalization string (`pers`) added into the hashing algorithm to\\n     * increase domain separation when needed.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000001`\\n     *\\n     * #### Gas cost\\n     *\\n     * 10,000 minimum plus 240 per output word plus 60 per word of the\\n     * personalization string.\\n     *\\n     * #### Implementation details\\n     *\\n     * The mode (e.g. simulation or \\\"view call\\\" vs transaction execution) is fed\\n     * to TupleHash (among other block-dependent components) to derive the \\\"key\\n     * id\\\", which is then used to derive a per-block VRF key from\\n     * epoch-ephemeral entropy (using KMAC256 and cSHAKE) so a different key\\n     * id will result in a unique per-block VRF key. This per-block VRF key is\\n     * then used to create the per-block root RNG which is then used to derive\\n     * domain-separated (using Merlin transcripts) per-transaction random RNGs\\n     * which are then exposed via this precompile. The KMAC, cSHAKE and\\n     * TupleHash algorithms are SHA-3 derived functions defined in [NIST\\n     * Special Publication 800-185](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf).\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory randomPad = Sapphire.randomBytes(64, \\\"\\\");\\n     * ```\\n     *\\n     * @param numBytes The number of bytes to return.\\n     * @param pers An optional personalization string to increase domain\\n     *        separation.\\n     * @return The random bytes. If the number of bytes requested is too large\\n     *         (over 1024), a smaller amount (1024) will be returned.\\n     */\\n    function randomBytes(uint256 numBytes, bytes memory pers)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory entropy) = RANDOM_BYTES.staticcall(\\n            abi.encode(numBytes, pers)\\n        );\\n        require(success, \\\"randomBytes: failed\\\");\\n        return entropy;\\n    }\\n\\n    /**\\n     * @notice Generates a Curve25519 keypair.\\n     * @param pers An optional personalization string used to add domain\\n     * separation.\\n     * @return pk The Curve25519 public key. Useful for key exchange.\\n     * @return sk The Curve25519 secret key. Pairs well with\\n     * [deriveSymmetricKey](#derivesymmetrickey).\\n     */\\n    function generateCurve25519KeyPair(bytes memory pers)\\n        internal\\n        view\\n        returns (Curve25519PublicKey pk, Curve25519SecretKey sk)\\n    {\\n        bytes memory scalar = randomBytes(32, pers);\\n        // Twiddle some bits, as per RFC 7748 \\u00a75.\\n        scalar[0] &= 0xf8; // Make it a multiple of 8 to avoid small subgroup attacks.\\n        scalar[31] &= 0x7f; // Clamp to < 2^255 - 19\\n        scalar[31] |= 0x40; // Clamp to >= 2^254\\n        (bool success, bytes memory pkBytes) = CURVE25519_PUBLIC_KEY.staticcall(\\n            scalar\\n        );\\n        require(success, \\\"gen curve25519 pk: failed\\\");\\n        return (\\n            Curve25519PublicKey.wrap(bytes32(pkBytes)),\\n            Curve25519SecretKey.wrap(bytes32(scalar))\\n        );\\n    }\\n\\n    /**\\n     * @notice Derive a symmetric key from a pair of keys using x25519.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000002`\\n     *\\n     * #### Gas cost\\n     *\\n     * 100,000\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 publicKey = ... ;\\n     * bytes32 privateKey = ... ;\\n     * bytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\\n     * ```\\n     *\\n     * @param peerPublicKey The peer's public key.\\n     * @param secretKey Your secret key.\\n     * @return A derived symmetric key.\\n     */\\n    function deriveSymmetricKey(\\n        Curve25519PublicKey peerPublicKey,\\n        Curve25519SecretKey secretKey\\n    ) internal view returns (bytes32) {\\n        (bool success, bytes memory symmetric) = DERIVE_KEY.staticcall(\\n            abi.encode(peerPublicKey, secretKey)\\n        );\\n        require(success, \\\"deriveSymmetricKey: failed\\\");\\n        return bytes32(symmetric);\\n    }\\n\\n    /**\\n     * @notice Encrypt and authenticate the plaintext and additional data using\\n     * DeoxysII.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000003`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for encryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param plaintext The plaintext to encrypt and authenticate.\\n     * @param additionalData The additional data to authenticate.\\n     * @return The ciphertext with appended auth tag.\\n     */\\n    function encrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory plaintext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory ciphertext) = ENCRYPT.staticcall(\\n            abi.encode(key, nonce, plaintext, additionalData)\\n        );\\n        require(success, \\\"encrypt: failed\\\");\\n        return ciphertext;\\n    }\\n\\n    /**\\n     * @notice Decrypt and authenticate the ciphertext and additional data using\\n     * DeoxysII. Reverts if the auth tag is incorrect.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000004`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for decryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param ciphertext The ciphertext with tag to decrypt and authenticate.\\n     * @param additionalData The additional data to authenticate against the\\n     * ciphertext.\\n     * @return The original plaintext.\\n     */\\n    function decrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory ciphertext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory plaintext) = DECRYPT.staticcall(\\n            abi.encode(key, nonce, ciphertext, additionalData)\\n        );\\n        require(success, \\\"decrypt: failed\\\");\\n        return plaintext;\\n    }\\n\\n    /**\\n     * @notice Generate a public/private key pair using the specified method and\\n     * seed. The available methods are items in the\\n     * [`Sapphire.SigningAlg`](#signingalg) enum. Note, however, that the\\n     * generation method ignores subvariants, so all three Ed25519-based are\\n     * equivalent, and all Secp256k1 & Secp256r1 based methods are equivalent.\\n     * Sr25519 is not available and will return an error.\\n     *\\n     * #### Precompile address\\n     * `0x0100000000000000000000000000000000000005`\\n     *\\n     * #### Gas Cost\\n     *\\n     * ##### Ed25519: 1,000 gas\\n     *\\n     * - `0` (`Ed25519Oasis`)\\n     * - `1` (`Ed25519Pure`)\\n     * - `2` (`Ed25519PrehashedSha512`)\\n     *\\n     * ##### Secp256k1: 1,500 gas.\\n     * - `3` (`Secp256k1Oasis`)\\n     * - `4` (`Secp256k1PrehashedKeccak256`)\\n     * - `5` (`Secp256k1PrehashedSha256`)\\n     *\\n     * ##### Secp256r1: 4,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`)\\n     *\\n     * ##### Secp384r1: 18,000 gas\\n     * - `8` (`Secp384r1PrehashedSha384`)\\n     *\\n     * #### Key Formats\\n     *\\n     * ##### Ed25519\\n     *\\n     * Public key: 32 bytes\\n     * Secret key: 32 bytes\\n     *\\n     * ##### Secp256k1 & Secp256r1\\n     *\\n     * Public key: 33 bytes, compressed format (`0x02` or `0x03` prefix, then 32\\n     * byte X coordinate).\\n     * Secret key: 32 bytes\\n     *\\n     * ##### Secp384r1\\n     *\\n     * Public key: 49 bytes, compressed format (`0x02` or `0x03` prefix, then 48\\n     * byte X coordinate).\\n     * Secret key: 48 bytes\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory seed = hex\\\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\\\";\\n     * bytes memory publicKey;\\n     * bytes memory privateKey;\\n     * (publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\\n     * ```\\n     *\\n     * @param alg The signing alg for which to generate a keypair.\\n     * @param seed The seed to use for generating the key pair. You can use the\\n     * `randomBytes` method if you don't already have a seed.\\n     * @return publicKey The public part of the keypair.\\n     * @return secretKey The secret part of the keypair.\\n     */\\n    function generateSigningKeyPair(SigningAlg alg, bytes memory seed)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory secretKey)\\n    {\\n        (bool success, bytes memory keypair) = GENERATE_SIGNING_KEYPAIR\\n            .staticcall(abi.encode(alg, seed));\\n        require(success, \\\"gen signing keypair: failed\\\");\\n        return abi.decode(keypair, (bytes, bytes));\\n    }\\n\\n    /**\\n     * @notice Sign a message within the provided context using the specified\\n     * algorithm, and return the signature. The `context_or_digest` and\\n     * `messages` parameters change in meaning slightly depending on the method\\n     * requested. For methods that take a context in addition to the message you\\n     * must pass the context in the `context_or_digest` parameter and use\\n     * `message` as expected. For methods that take a pre-existing hash of the\\n     * message, pass that in `context_or_digest` and leave `message` empty.\\n     * Specifically the `Ed25519Oasis` and `Secp256k1Oasis` variants take both a\\n     * context and a message (each are variable length `bytes`), the context\\n     * serves as a domain separator.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000006`\\n     *\\n     * #### Gas cost\\n     *\\n     * See below for the method-dependent base cost, plus 8 gas per 32 bytes of\\n     * context and message except digest.\\n     *\\n     * #### Signing algorithms\\n     *\\n     * - `0` (`Ed25519Oasis`): 1,500 gas, variable length context and message.\\n     * - `1` (`Ed25519Pure`): 1,500 gas, empty context, variable length message.\\n     * - `2` (`Ed25519PrehashedSha512`): 1,500 gas, pre-existing SHA-512 hash\\n     *   (64 bytes) as context, empty message.\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas, variable length context and message\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas, pre-existing hash\\n     *   (32 bytes) as context, empty message.\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `7` (`Secp256r1PrehashedSha256`): 9,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `8` (`Secp384r1PrehashedSha384`): 43,200 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Ed25519Pure;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, \\\"\\\", \\\"signed message\\\");\\n     * ```\\n     *\\n     * @param alg The signing algorithm to use.\\n     * @param secretKey The secret key to use for signing. The key must be valid\\n     * for use with the requested algorithm.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes.\\n     * @param message Message to sign, should be zero-length if precomputed hash\\n     * given.\\n     * @return signature The resulting signature.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_sign\\n     */\\n    function sign(\\n        SigningAlg alg,\\n        bytes memory secretKey,\\n        bytes memory contextOrHash,\\n        bytes memory message\\n    ) internal view returns (bytes memory signature) {\\n        (bool success, bytes memory sig) = SIGN_DIGEST.staticcall(\\n            abi.encode(alg, secretKey, contextOrHash, message)\\n        );\\n        require(success, \\\"sign: failed\\\");\\n        return sig;\\n    }\\n\\n    /**\\n     * @notice Verifies that the provided digest was signed with using the\\n     * secret key corresponding to the provided private key and the specified\\n     * signing algorithm.\\n     *\\n     * The `method`, `context_or_digest` and `message` parameters have the same\\n     * meaning as described above in the [sign()](#sign) function.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000007`\\n     *\\n     * #### Gas cost\\n     *\\n     * The algorithm-specific base cost below, with an additional **8 gas per\\n     * 32 bytes** of `context` and `message` for the `Ed25519Oasis`,\\n     * `Ed25519Pure` and `Secp256k1Oasis` algorithms.\\n     *\\n     * - `0` (`Ed25519Oasis`): 2,000 gas\\n     * - `1` (`Ed25519Pure`): 2,000 gas\\n     * - `2` (`Ed25519PrehashedSha512`): 2,000 gas\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`): 7,900 gas\\n     * - `8` (`Secp384r1PrehashedSha384`): 37,920 gas\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Secp256k1PrehashedKeccak256;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * bytes memory digest = abi.encodePacked(keccak256(\\\"signed message\\\"));\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, digest, \\\"\\\");\\n     * require( Sapphire.verify(alg, pk, digest, \\\"\\\", signature) );\\n     * ```\\n     *\\n     * @param alg The signing algorithm by which the signature was generated.\\n     * @param publicKey The public key against which to check the signature.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes\\n     * @param message The hash of the message that was signed, should be\\n     * zero-length if precomputed hash was given.\\n     * @param signature The signature to check.\\n     * @return verified Whether the signature is valid for the given parameters.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_verify\\n     */\\n    function verify(\\n        SigningAlg alg,\\n        bytes memory publicKey,\\n        bytes memory contextOrHash,\\n        bytes memory message,\\n        bytes memory signature\\n    ) internal view returns (bool verified) {\\n        (bool success, bytes memory v) = VERIFY_DIGEST.staticcall(\\n            abi.encode(alg, publicKey, contextOrHash, message, signature)\\n        );\\n        require(success, \\\"verify: failed\\\");\\n        return abi.decode(v, (bool));\\n    }\\n\\n    /**\\n     * @notice Set the current transactions gas usage to a specific amount\\n     * @dev Will cause a reversion if the current usage is more than the amount.\\n     * @param toAmount Gas usage will be set to this amount\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_pad_gas\\n     *\\n     */\\n    function padGas(uint128 toAmount) internal view {\\n        (bool success, ) = PAD_GAS.staticcall(abi.encode(toAmount));\\n        require(success, \\\"verify: failed\\\");\\n    }\\n\\n    /**\\n     * @notice Returns the amount of gas currently used by the transaction\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_gas_used\\n     */\\n    function gasUsed() internal view returns (uint64) {\\n        (bool success, bytes memory v) = GAS_USED.staticcall(\\\"\\\");\\n        require(success, \\\"gasused: failed\\\");\\n        return abi.decode(v, (uint64));\\n    }\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512/256, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000102`\\n *\\n * #### Gas cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes32 result = sha512_256(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * @param input Bytes to hash.\\n * @return result 32 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512_256\\n */\\nfunction sha512_256(bytes memory input) view returns (bytes32 result) {\\n    (bool success, bytes memory output) = Sapphire.SHA512_256.staticcall(input);\\n\\n    require(success, \\\"sha512_256\\\");\\n\\n    return bytes32(output);\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000101`\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * #### Gas Cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes memory result = sha512(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * @param input Bytes to hash.\\n * @return output 64 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512\\n */\\nfunction sha512(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA512.staticcall(input);\\n\\n    require(success, \\\"sha512\\\");\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-384.\\n * @param input Bytes to hash.\\n * @return output 48 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha384\\n */\\nfunction sha384(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA384.staticcall(input);\\n\\n    require(success, \\\"sha384\\\");\\n}\\n\",\"keccak256\":\"0x87a43ed0f7c74b7da8ee58d349f466fb2947bf71f6fca10174ebad96d59e2c8a\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/SiweParser.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {DateTime} from \\\"./DateTime.sol\\\";\\n\\nstruct ParsedSiweMessage {\\n    bytes schemeDomain;\\n    address addr;\\n    bytes statement;\\n    bytes uri;\\n    bytes version;\\n    uint256 chainId;\\n    bytes nonce;\\n    bytes issuedAt;\\n    bytes expirationTime;\\n    bytes notBefore;\\n    bytes requestId;\\n    bytes[] resources;\\n}\\n\\n/**\\n * @title On-chain parser for EIP-4361 SIWE message\\n * @notice Call parseSiweMsg() and provide the EIP-4361 SIWE message. The parser\\n * will generate the ParsedSiweMessage struct which you can then use to\\n * extract the authentication information in your on-chain contract.\\n */\\nlibrary SiweParser {\\n    /// Invalid length of the hex-encoded address\\n    error SiweParser_InvalidAddressLength();\\n    /// Invalid length of the nonce\\n    error SiweParser_InvalidNonce();\\n\\n    /**\\n     * @notice Convert string containing hex address without 0x prefix to solidity address object.\\n     */\\n    function _hexStringToAddress(bytes memory s)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        if (s.length != 40) {\\n            revert SiweParser_InvalidAddressLength();\\n        }\\n\\n        bytes memory r = new bytes(s.length / 2);\\n        for (uint256 i = 0; i < s.length / 2; ++i) {\\n            r[i] = bytes1(\\n                _fromHexChar(uint8(s[2 * i])) *\\n                    16 +\\n                    _fromHexChar(uint8(s[2 * i + 1]))\\n            );\\n        }\\n        return address(bytes20(r));\\n    }\\n\\n    function _fromHexChar(uint8 c) internal pure returns (uint8) {\\n        if (bytes1(c) >= bytes1(\\\"0\\\") && bytes1(c) <= bytes1(\\\"9\\\")) {\\n            return c - uint8(bytes1(\\\"0\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"a\\\") && bytes1(c) <= bytes1(\\\"f\\\")) {\\n            return 10 + c - uint8(bytes1(\\\"a\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"A\\\") && bytes1(c) <= bytes1(\\\"F\\\")) {\\n            return 10 + c - uint8(bytes1(\\\"A\\\"));\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Substring.\\n     */\\n    function _substr(\\n        bytes memory str,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex && i < str.length; i++) {\\n            result[i - startIndex] = str[i];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice String to Uint using decimal format. No error handling.\\n     */\\n    function _parseUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            result = result * 10 + (uint256(uint8(b[i])) - 0x30);\\n        }\\n        return (result);\\n    }\\n\\n    /**\\n     * @notice Parse \\\"NAME: VALUE\\\" in str starting at index i and ending at \\\\n or end of bytes.\\n     * @return VALUE and new i, if NAME matched; otherwise empty value and old i.\\n     */\\n    function _parseField(\\n        bytes calldata str,\\n        string memory name,\\n        uint256 i\\n    ) internal pure returns (bytes memory, uint256) {\\n        uint256 j = i;\\n        for (; j < str.length; j++) {\\n            if (str[j] == \\\":\\\") {\\n                // Delimiter found, check the name.\\n                if (keccak256(_substr(str, i, j)) != keccak256(bytes(name))) {\\n                    return (\\\"\\\", i);\\n                }\\n\\n                // Skip :\\n                j++;\\n                if (j < str.length && str[j] == \\\" \\\") {\\n                    // Skip blank\\n                    j++;\\n                }\\n\\n                i = j;\\n                break;\\n            }\\n        }\\n\\n        for (; j < str.length; j++) {\\n            if (str[j] == 0x0a) {\\n                return (_substr(str, i, j), j + 1);\\n            }\\n        }\\n        return (_substr(str, i, j), j);\\n    }\\n\\n    /**\\n     * @notice Parse bullets, one per line in str starting at i.\\n     * @return Array of parsed values and a new i.\\n     */\\n    function _parseArray(bytes calldata str, uint256 i)\\n        internal\\n        pure\\n        returns (bytes[] memory, uint256)\\n    {\\n        // First count the number of resources.\\n        uint256 j = i;\\n        uint256 count = 0;\\n        for (; j < str.length - 1; j++) {\\n            if (str[j] == \\\"-\\\" && str[j + 1] == \\\" \\\") {\\n                j += 2;\\n                count++;\\n            } else {\\n                break;\\n            }\\n            while (j < str.length && str[j] != 0x0a) {\\n                j++;\\n            }\\n        }\\n\\n        // Then build an array.\\n        bytes[] memory values = new bytes[](count);\\n        j = i;\\n        for (uint256 c = 0; j < str.length - 1 && c != count; j++) {\\n            if (str[j] == \\\"-\\\" && str[j + 1] == \\\" \\\") {\\n                i = j + 2;\\n            }\\n            while (j < str.length && str[j] != 0x0a) {\\n                j++;\\n            }\\n            values[c] = _substr(str, i, j);\\n            c++;\\n            if (j == str.length) {\\n                j--; // Subtract 1 because of the outer loop.\\n            }\\n        }\\n        return (values, j);\\n    }\\n\\n    /**\\n     * @notice Parse SIWE message.\\n     * @return ParsedSiweMessage struct with populated fields from the message.\\n     */\\n    function parseSiweMsg(bytes calldata siweMsg)\\n        internal\\n        pure\\n        returns (ParsedSiweMessage memory)\\n    {\\n        ParsedSiweMessage memory p;\\n        uint256 i = 0;\\n\\n        // dApp Domain.\\n        for (; i < siweMsg.length; i++) {\\n            if (siweMsg[i] == \\\" \\\") {\\n                p.schemeDomain = _substr(siweMsg, 0, i);\\n                break;\\n            }\\n        }\\n\\n        i += 50; // \\\" wants you to sign in with your Ethereum account:\\\\n\\\"\\n\\n        // Address.\\n        // TODO: Verify the mixed-case checksum.\\n        p.addr = _hexStringToAddress(_substr(siweMsg, i += 2, i += 40));\\n        i += 2; // End of address new line + New line.\\n\\n        // (Optional) statement.\\n        if (i < siweMsg.length && siweMsg[i] != \\\"\\\\n\\\") {\\n            for (uint256 j = i; j < siweMsg.length; j++) {\\n                if (siweMsg[j] == 0x0a) {\\n                    p.statement = _substr(siweMsg, i, j);\\n                    i = j + 1; // End of statement new line.\\n                    break;\\n                }\\n            }\\n        }\\n\\n        i++; // New line.\\n\\n        (p.uri, i) = _parseField(siweMsg, \\\"URI\\\", i);\\n        (p.version, i) = _parseField(siweMsg, \\\"Version\\\", i);\\n        bytes memory chainId;\\n        (chainId, i) = _parseField(siweMsg, \\\"Chain ID\\\", i);\\n        p.chainId = _parseUint(chainId);\\n        (p.nonce, i) = _parseField(siweMsg, \\\"Nonce\\\", i);\\n        if (p.nonce.length < 8) {\\n            revert SiweParser_InvalidNonce();\\n        }\\n        (p.issuedAt, i) = _parseField(siweMsg, \\\"Issued At\\\", i);\\n        (p.expirationTime, i) = _parseField(siweMsg, \\\"Expiration Time\\\", i);\\n        (p.notBefore, i) = _parseField(siweMsg, \\\"Not Before\\\", i);\\n        (p.requestId, i) = _parseField(siweMsg, \\\"Request ID\\\", i);\\n\\n        // Parse resources, if they exist.\\n        uint256 newI;\\n        (, newI) = _parseField(siweMsg, \\\"Resources\\\", i);\\n        if (newI != i) {\\n            (p.resources, i) = _parseArray(siweMsg, newI);\\n        }\\n\\n        return p;\\n    }\\n\\n    /**\\n     * @notice Parse RFC 3339 (ISO 8601) string to timestamp.\\n     */\\n    function timestampFromIso(bytes memory str)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            DateTime.toTimestamp(\\n                uint16(_parseUint(_substr(str, 0, 4))),\\n                uint8(_parseUint(_substr(str, 5, 7))),\\n                uint8(_parseUint(_substr(str, 8, 10))),\\n                uint8(_parseUint(_substr(str, 11, 13))),\\n                uint8(_parseUint(_substr(str, 14, 16))),\\n                uint8(_parseUint(_substr(str, 17, 19)))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x07529271c0beff34900dcd2d967635ddf0af86645a1c5fdcf7396b12bc3a9965\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/auth/A13e.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {SignatureRSV} from \\\"../EthereumUtils.sol\\\";\\n\\n/**\\n * @title Interface for authenticatable contracts\\n * @notice This is the interface for universal authentication mechanism (e.g.\\n * SIWE):\\n * 1. The user-facing app calls `login()` which generates the authentication\\n *    token on-chain.\\n * 2. Any smart contract method that requires authentication can take this token\\n *    as an argument. Passing this token to `authMsgSender()` verifies it and\\n *    returns the **authenticated** user address. This verified address can then\\n *    serve as a user ID for authorization.\\n */\\nabstract contract A13e {\\n    /// A mapping of revoked authentication tokens. Access it directly or use the checkRevokedAuthToken modifier.\\n    mapping(bytes32 => bool) internal _revokedAuthTokens;\\n\\n    /// The authentication token was revoked\\n    error A13e_RevokedAuthToken();\\n\\n    /**\\n     * @notice Reverts if the given token was revoked\\n     */\\n    modifier checkRevokedAuthToken(bytes memory token) {\\n        if (_revokedAuthTokens[keccak256(token)]) {\\n            revert A13e_RevokedAuthToken();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Verify the login message and its signature and generate the\\n     * token.\\n     */\\n    function login(string calldata message, SignatureRSV calldata sig)\\n        external\\n        view\\n        virtual\\n        returns (bytes memory);\\n\\n    /**\\n     * @notice Validate the token and return authenticated msg.sender.\\n     */\\n    function authMsgSender(bytes memory token)\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n\\n    /**\\n     * @notice Revoke the authentication token with the corresponding hash.\\n     * e.g. In case when the token is leaked or for extra-secure apps on\\n     * every logout.\\n     */\\n    function revokeAuthToken(bytes32 token) internal {\\n        _revokedAuthTokens[token] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x0cf14dfe3264acfd5b67c0559d668dfbbdeea96879ade2c1144aac3931968fe2\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {SignatureRSV, A13e} from \\\"./A13e.sol\\\";\\nimport {ParsedSiweMessage, SiweParser} from \\\"../SiweParser.sol\\\";\\nimport {Sapphire} from \\\"../Sapphire.sol\\\";\\n\\n/// @title AuthToken structure for SIWE-based authentication\\nstruct AuthToken {\\n    string domain; // [ scheme \\\"://\\\" ] domain.\\n    address userAddr;\\n    uint256 validUntil; // in Unix timestamp.\\n    string statement; // Human-readable statement from the SIWE message.\\n    string[] resources; // Resources this token grants access to.\\n}\\n\\n/**\\n * @title Base contract for SIWE-based authentication\\n * @notice Inherit this contract if you wish to enable SIWE-based\\n * authentication in your contract functions that require authentication.\\n * The smart contract needs to be bound to a domain (passed in constructor).\\n *\\n * #### Example\\n *\\n * ```solidity\\n * contract MyContract is SiweAuth {\\n *   address private _owner;\\n *   string private _message;\\n *\\n *   modifier onlyOwner(bytes memory token) {\\n *     if (msg.sender != _owner && authMsgSender(token) != _owner) {\\n *       revert(\\\"not allowed\\\");\\n *     }\\n *     _;\\n *   }\\n *\\n *   constructor(string memory domain) SiweAuth(domain) {\\n *     _owner = msg.sender;\\n *   }\\n *\\n *   function getSecretMessage(bytes memory token) external view onlyOwner(token) returns (string memory) {\\n *     return _message;\\n *   }\\n *\\n *   function setSecretMessage(string calldata message) external onlyOwner(\\\"\\\") {\\n *     _message = message;\\n *   }\\n * }\\n * ```\\n */\\ncontract SiweAuth is A13e {\\n    /// Domain which the dApp is associated with\\n    string internal _domain;\\n    /// Encryption key which the authentication tokens are encrypted with\\n    bytes32 private _authTokenEncKey;\\n    /// Default authentication token validity, if no expiration-time provided\\n    uint256 private constant DEFAULT_VALIDITY = 24 hours;\\n\\n    /// Chain ID in the SIWE message does not match the actual chain ID\\n    error SiweAuth_ChainIdMismatch();\\n    /// Domain in the SIWE message does not match the domain of a dApp\\n    error SiweAuth_DomainMismatch();\\n    /// User address in the SIWE message does not match the message signer's address\\n    error SiweAuth_AddressMismatch();\\n    /// The Not before value in the SIWE message is still in the future\\n    error SiweAuth_NotBeforeInFuture();\\n    /// Validity of the authentication token or the Expires value in the SIWE message is in the past\\n    error SiweAuth_Expired();\\n\\n    /**\\n     * @notice Instantiate the contract which uses SIWE for authentication and\\n     * runs on the specified domain.\\n     * @param inDomain The domain this contract is associated with\\n     */\\n    constructor(string memory inDomain) {\\n        _authTokenEncKey = bytes32(Sapphire.randomBytes(32, \\\"\\\"));\\n        _domain = inDomain;\\n    }\\n\\n    /**\\n     * @notice Login using a SIWE message and signature\\n     * @param siweMsg The signed SIWE message\\n     * @param sig The signature of the SIWE message\\n     * @return The encrypted authentication token\\n     */\\n    function login(string calldata siweMsg, SignatureRSV calldata sig)\\n        external\\n        view\\n        override\\n        returns (bytes memory)\\n    {\\n        AuthToken memory b;\\n\\n        // Derive the user's address from the signature.\\n        bytes memory eip191msg = abi.encodePacked(\\n            \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n            Strings.toString(bytes(siweMsg).length),\\n            siweMsg\\n        );\\n        address addr = ecrecover(\\n            keccak256(eip191msg),\\n            uint8(sig.v),\\n            sig.r,\\n            sig.s\\n        );\\n        b.userAddr = addr;\\n\\n        ParsedSiweMessage memory p = SiweParser.parseSiweMsg(bytes(siweMsg));\\n\\n        if (p.chainId != block.chainid) {\\n            revert SiweAuth_ChainIdMismatch();\\n        }\\n\\n        if (keccak256(p.schemeDomain) != keccak256(bytes(_domain))) {\\n            revert SiweAuth_DomainMismatch();\\n        }\\n        b.domain = string(p.schemeDomain);\\n\\n        if (p.addr != addr) {\\n            revert SiweAuth_AddressMismatch();\\n        }\\n\\n        if (\\n            p.notBefore.length != 0 &&\\n            block.timestamp <= SiweParser.timestampFromIso(p.notBefore)\\n        ) {\\n            revert SiweAuth_NotBeforeInFuture();\\n        }\\n\\n        if (p.expirationTime.length != 0) {\\n            // Compute expected block number at expiration time.\\n            uint256 expirationTime = SiweParser.timestampFromIso(\\n                p.expirationTime\\n            );\\n            b.validUntil = expirationTime;\\n        } else {\\n            // Otherwise, just take the default validity.\\n            b.validUntil = block.timestamp + DEFAULT_VALIDITY;\\n        }\\n        if (block.timestamp >= b.validUntil) {\\n            revert SiweAuth_Expired();\\n        }\\n\\n        // Store statement from the SIWE message.\\n        b.statement = string(p.statement);\\n\\n        // Store resources from the SIWE message.\\n        b.resources = new string[](p.resources.length);\\n        for (uint256 i = 0; i < p.resources.length; i++) {\\n            b.resources[i] = string(p.resources[i]);\\n        }\\n\\n        bytes memory encB = Sapphire.encrypt(\\n            _authTokenEncKey,\\n            0,\\n            abi.encode(b),\\n            \\\"\\\"\\n        );\\n        return encB;\\n    }\\n\\n    /**\\n     * @notice Return the domain associated with the dApp.\\n     * @return The domain string\\n     */\\n    function domain() public view returns (string memory) {\\n        return _domain;\\n    }\\n\\n    /**\\n     * @notice Get the authenticated address from a token\\n     * @param token The authentication token\\n     * @return The authenticated user address or zero address if token is empty\\n     */\\n    function authMsgSender(bytes memory token)\\n        internal\\n        view\\n        override\\n        checkRevokedAuthToken(token)\\n        returns (address)\\n    {\\n        if (token.length == 0) {\\n            return address(0);\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.userAddr;\\n    }\\n\\n    /**\\n     * @notice Get the statement from the authentication token\\n     * @param token The authentication token\\n     * @return The statement string from the SIWE message\\n     */\\n    function getStatement(bytes memory token)\\n        internal\\n        view\\n        checkRevokedAuthToken(token)\\n        returns (string memory)\\n    {\\n        if (token.length == 0) {\\n            return \\\"\\\";\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.statement;\\n    }\\n\\n    /**\\n     * @notice Get all resources from the authentication token\\n     * @param token The authentication token\\n     * @return Array of resource URIs the token grants access to\\n     */\\n    function getResources(bytes memory token)\\n        internal\\n        view\\n        checkRevokedAuthToken(token)\\n        returns (string[] memory)\\n    {\\n        if (token.length == 0) {\\n            return new string[](0);\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.resources;\\n    }\\n\\n    /**\\n     * @notice Helper function to decrypt, decode and validate a token\\n     * @dev Performs token decoding as well as domain and validation\\n     * @param token The authentication token\\n     * @return The decoded and validated AuthToken struct\\n     */\\n    function decodeAndValidateToken(bytes memory token)\\n        internal\\n        view\\n        virtual\\n        returns (AuthToken memory)\\n    {\\n        bytes memory authTokenEncoded = Sapphire.decrypt(\\n            _authTokenEncKey,\\n            0,\\n            token,\\n            \\\"\\\"\\n        );\\n        AuthToken memory b = abi.decode(authTokenEncoded, (AuthToken));\\n\\n        // Validate domain\\n        if (keccak256(bytes(b.domain)) != keccak256(bytes(_domain))) {\\n            revert SiweAuth_DomainMismatch();\\n        }\\n\\n        // Validate expiry\\n        if (b.validUntil < block.timestamp) {\\n            revert SiweAuth_Expired();\\n        }\\n\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x99fe870c763ff9329f6bac4484ab0ec54fb90ca8bb665b44fd2e058fe739acda\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/SimpleBet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\\\";\\n\\n/**\\n * @title SimpleBet\\n * @dev A simple betting smart contract with SiweAuth integration for Oasis Sapphire\\n * Users can place bets, contract acts as escrow, and owner can manage funds\\n */\\ncontract SimpleBet is SiweAuth {\\n    address private _owner;\\n    uint256 private _nextBetId = 1;\\n    \\n    enum BetOutcome {\\n        YES,\\n        NO\\n    }\\n    \\n    enum BetStatus {\\n        Active,\\n        Won,\\n        Lost,\\n        Cancelled\\n    }\\n    \\n    struct Bet {\\n        uint256 id;\\n        address user;\\n        uint256 amount;\\n        BetOutcome outcome;\\n        BetStatus status;\\n        uint256 createdAt;\\n        string description;\\n    }\\n    \\n    // Public metadata (encrypted but accessible via getter)\\n    Bet[] public _betMetas;\\n    \\n    // Private secret data (truly secret)\\n    bytes[] private _betSecrets;\\n    \\n    mapping(address => uint256[]) private _userBets;\\n    mapping(address => uint256) public userBalances;\\n    \\n    event BetPlaced(\\n        uint256 indexed betId,\\n        address indexed user,\\n        uint256 amount,\\n        BetOutcome outcome,\\n        uint256 index\\n    );\\n    \\n    event BetResolved(\\n        uint256 indexed betId,\\n        BetStatus status,\\n        uint256 payout\\n    );\\n    \\n    event FundsWithdrawn(\\n        address indexed user,\\n        uint256 amount\\n    );\\n    \\n    modifier onlyOwner(bytes memory token) {\\n        if (msg.sender != _owner && authMsgSender(token) != _owner) {\\n            revert(\\\"not allowed\\\");\\n        }\\n        _;\\n    }\\n    \\n    modifier onlyBetOwner(uint256 betId, bytes memory token) {\\n        require(betId < _betMetas.length, \\\"Bet does not exist\\\");\\n        address betOwner = _betMetas[betId].user;\\n        if (msg.sender != betOwner && authMsgSender(token) != betOwner) {\\n            revert(\\\"not bet owner\\\");\\n        }\\n        _;\\n    }\\n    \\n    constructor(string memory domain) SiweAuth(domain) {\\n        _owner = msg.sender;\\n    }\\n    \\n    /**\\n     * @dev Place a bet with amount and outcome\\n     * @param outcome The outcome to bet on (YES/NO)\\n     * @param description Public description of the bet\\n     * @param secretData Private data associated with the bet\\n     */\\n    function placeBet(\\n        BetOutcome outcome,\\n        string calldata description,\\n        bytes calldata secretData\\n    ) external payable {\\n        require(msg.value > 0, \\\"Bet amount must be greater than 0\\\");\\n        \\n        uint256 betId = _nextBetId++;\\n        \\n        Bet memory newBet = Bet({\\n            id: betId,\\n            user: msg.sender,\\n            amount: msg.value,\\n            outcome: outcome,\\n            status: BetStatus.Active,\\n            createdAt: block.timestamp,\\n            description: description\\n        });\\n        \\n        _betMetas.push(newBet);\\n        _betSecrets.push(secretData);\\n        _userBets[msg.sender].push(_betMetas.length - 1);\\n        \\n        emit BetPlaced(betId, msg.sender, msg.value, outcome, _betMetas.length - 1);\\n    }\\n    \\n    /**\\n     * @dev Get user's bets using SIWE authentication\\n     * @param token SIWE authentication token\\n     * @param offset Pagination offset\\n     * @param count Number of bets to return\\n     */\\n    function getUserBets(\\n        bytes memory token,\\n        uint256 offset,\\n        uint256 count\\n    ) external view returns (Bet[] memory) {\\n        address user = authMsgSender(token);\\n        require(user != address(0), \\\"Invalid authentication token\\\");\\n        \\n        uint256[] memory userBetIndices = _userBets[user];\\n        \\n        if (offset >= userBetIndices.length) {\\n            return new Bet[](0);\\n        }\\n        \\n        uint256 end = offset + count;\\n        if (end > userBetIndices.length) {\\n            end = userBetIndices.length;\\n        }\\n        \\n        Bet[] memory result = new Bet[](end - offset);\\n        for (uint256 i = offset; i < end; i++) {\\n            result[i - offset] = _betMetas[userBetIndices[i]];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /**\\n     * @dev Get secret data for a specific bet (only bet owner can access)\\n     * @param betIndex Index of the bet in the _betMetas array\\n     * @param token SIWE authentication token\\n     */\\n    function getBetSecret(\\n        uint256 betIndex,\\n        bytes memory token\\n    ) external view onlyBetOwner(_betMetas[betIndex].id, token) returns (bytes memory) {\\n        require(betIndex < _betSecrets.length, \\\"Bet secret does not exist\\\");\\n        return _betSecrets[betIndex];\\n    }\\n    \\n    /**\\n     * @dev Resolve a bet (only owner)\\n     * @param betId The bet ID to resolve\\n     * @param won Whether the bet won or lost\\n     * @param token SIWE authentication token for owner\\n     */\\n    function resolveBet(\\n        uint256 betId,\\n        bool won,\\n        bytes memory token\\n    ) external onlyOwner(token) {\\n        require(betId > 0 && betId < _nextBetId, \\\"Invalid bet ID\\\");\\n        \\n        // Find the bet in the array\\n        uint256 betIndex = 0;\\n        bool found = false;\\n        for (uint256 i = 0; i < _betMetas.length; i++) {\\n            if (_betMetas[i].id == betId) {\\n                betIndex = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Bet not found\\\");\\n        require(_betMetas[betIndex].status == BetStatus.Active, \\\"Bet already resolved\\\");\\n        \\n        Bet storage bet = _betMetas[betIndex];\\n        uint256 payout = 0;\\n        \\n        if (won) {\\n            bet.status = BetStatus.Won;\\n            // Simple 2x payout for winning bets\\n            payout = bet.amount * 2;\\n            userBalances[bet.user] += payout;\\n        } else {\\n            bet.status = BetStatus.Lost;\\n            // No payout for losing bets\\n        }\\n        \\n        emit BetResolved(betId, bet.status, payout);\\n    }\\n    \\n    /**\\n     * @dev Cancel a bet and refund (only owner)\\n     * @param betId The bet ID to cancel\\n     * @param token SIWE authentication token for owner\\n     */\\n    function cancelBet(\\n        uint256 betId,\\n        bytes memory token\\n    ) external onlyOwner(token) {\\n        require(betId > 0 && betId < _nextBetId, \\\"Invalid bet ID\\\");\\n        \\n        // Find the bet in the array\\n        uint256 betIndex = 0;\\n        bool found = false;\\n        for (uint256 i = 0; i < _betMetas.length; i++) {\\n            if (_betMetas[i].id == betId) {\\n                betIndex = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Bet not found\\\");\\n        require(_betMetas[betIndex].status == BetStatus.Active, \\\"Bet already resolved\\\");\\n        \\n        Bet storage bet = _betMetas[betIndex];\\n        bet.status = BetStatus.Cancelled;\\n        \\n        // Refund the bet amount\\n        userBalances[bet.user] += bet.amount;\\n        \\n        emit BetResolved(betId, bet.status, bet.amount);\\n    }\\n    \\n    /**\\n     * @dev Withdraw user balance\\n     */\\n    function withdrawBalance() external {\\n        uint256 balance = userBalances[msg.sender];\\n        require(balance > 0, \\\"No balance to withdraw\\\");\\n        \\n        userBalances[msg.sender] = 0;\\n        \\n        (bool success, ) = payable(msg.sender).call{value: balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n        \\n        emit FundsWithdrawn(msg.sender, balance);\\n    }\\n    \\n    /**\\n     * @dev Owner withdraws contract funds (only owner)\\n     * @param amount Amount to withdraw\\n     * @param token SIWE authentication token for owner\\n     */\\n    function ownerWithdraw(\\n        uint256 amount,\\n        bytes memory token\\n    ) external onlyOwner(token) {\\n        require(amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n        \\n        (bool success, ) = payable(_owner).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Owner withdrawal failed\\\");\\n        \\n        emit FundsWithdrawn(_owner, amount);\\n    }\\n    \\n    /**\\n     * @dev Get all bet metadata (paginated)\\n     * @param offset Pagination offset\\n     * @param count Number of bets to return\\n     */\\n    function getAllBets(\\n        uint256 offset,\\n        uint256 count\\n    ) external view returns (Bet[] memory) {\\n        if (offset >= _betMetas.length) {\\n            return new Bet[](0);\\n        }\\n        \\n        uint256 end = offset + count;\\n        if (end > _betMetas.length) {\\n            end = _betMetas.length;\\n        }\\n        \\n        Bet[] memory result = new Bet[](end - offset);\\n        for (uint256 i = offset; i < end; i++) {\\n            result[i - offset] = _betMetas[offset + i];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /**\\n     * @dev Get contract balance\\n     */\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n    \\n    /**\\n     * @dev Get total number of bets\\n     */\\n    function getTotalBets() external view returns (uint256) {\\n        return _betMetas.length;\\n    }\\n    \\n    /**\\n     * @dev Get user's total bet count\\n     * @param user User address\\n     */\\n    function getUserBetCount(address user) external view returns (uint256) {\\n        return _userBets[user].length;\\n    }\\n    \\n    /**\\n     * @dev Get owner address\\n     */\\n    function getOwner() external view returns (address) {\\n        return _owner;\\n    }\\n}\",\"keccak256\":\"0xacfa331cc474771bf0edfb270309673e734dfec9772d8e2ee96bb55a8bf73e1f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "A simple betting smart contract with SiweAuth integration for Oasis Sapphire Users can place bets, contract acts as escrow, and owner can manage funds",
    "kind": "dev",
    "methods": {
      "cancelBet(uint256,bytes)": {
        "details": "Cancel a bet and refund (only owner)",
        "params": {
          "betId": "The bet ID to cancel",
          "token": "SIWE authentication token for owner"
        }
      },
      "domain()": {
        "returns": {
          "_0": "The domain string"
        }
      },
      "getAllBets(uint256,uint256)": {
        "details": "Get all bet metadata (paginated)",
        "params": {
          "count": "Number of bets to return",
          "offset": "Pagination offset"
        }
      },
      "getBetSecret(uint256,bytes)": {
        "details": "Get secret data for a specific bet (only bet owner can access)",
        "params": {
          "betIndex": "Index of the bet in the _betMetas array",
          "token": "SIWE authentication token"
        }
      },
      "getContractBalance()": {
        "details": "Get contract balance"
      },
      "getOwner()": {
        "details": "Get owner address"
      },
      "getTotalBets()": {
        "details": "Get total number of bets"
      },
      "getUserBetCount(address)": {
        "details": "Get user's total bet count",
        "params": {
          "user": "User address"
        }
      },
      "getUserBets(bytes,uint256,uint256)": {
        "details": "Get user's bets using SIWE authentication",
        "params": {
          "count": "Number of bets to return",
          "offset": "Pagination offset",
          "token": "SIWE authentication token"
        }
      },
      "login(string,(bytes32,bytes32,uint256))": {
        "params": {
          "sig": "The signature of the SIWE message",
          "siweMsg": "The signed SIWE message"
        },
        "returns": {
          "_0": "The encrypted authentication token"
        }
      },
      "ownerWithdraw(uint256,bytes)": {
        "details": "Owner withdraws contract funds (only owner)",
        "params": {
          "amount": "Amount to withdraw",
          "token": "SIWE authentication token for owner"
        }
      },
      "placeBet(uint8,string,bytes)": {
        "details": "Place a bet with amount and outcome",
        "params": {
          "description": "Public description of the bet",
          "outcome": "The outcome to bet on (YES/NO)",
          "secretData": "Private data associated with the bet"
        }
      },
      "resolveBet(uint256,bool,bytes)": {
        "details": "Resolve a bet (only owner)",
        "params": {
          "betId": "The bet ID to resolve",
          "token": "SIWE authentication token for owner",
          "won": "Whether the bet won or lost"
        }
      },
      "withdrawBalance()": {
        "details": "Withdraw user balance"
      }
    },
    "title": "SimpleBet",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "A13e_RevokedAuthToken()": [
        {
          "notice": "The authentication token was revoked"
        }
      ],
      "SiweAuth_AddressMismatch()": [
        {
          "notice": "User address in the SIWE message does not match the message signer's address"
        }
      ],
      "SiweAuth_ChainIdMismatch()": [
        {
          "notice": "Chain ID in the SIWE message does not match the actual chain ID"
        }
      ],
      "SiweAuth_DomainMismatch()": [
        {
          "notice": "Domain in the SIWE message does not match the domain of a dApp"
        }
      ],
      "SiweAuth_Expired()": [
        {
          "notice": "Validity of the authentication token or the Expires value in the SIWE message is in the past"
        }
      ],
      "SiweAuth_NotBeforeInFuture()": [
        {
          "notice": "The Not before value in the SIWE message is still in the future"
        }
      ],
      "SiweParser_InvalidAddressLength()": [
        {
          "notice": "Invalid length of the hex-encoded address"
        }
      ],
      "SiweParser_InvalidNonce()": [
        {
          "notice": "Invalid length of the nonce"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "domain()": {
        "notice": "Return the domain associated with the dApp."
      },
      "login(string,(bytes32,bytes32,uint256))": {
        "notice": "Login using a SIWE message and signature"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2352,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_revokedAuthTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2436,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_domain",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2439,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_authTokenEncKey",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 4309,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4312,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_nextBetId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4341,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_betMetas",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Bet)4337_storage)dyn_storage"
      },
      {
        "astId": 4344,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_betSecrets",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 4349,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "_userBets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4353,
        "contract": "contracts/SimpleBet.sol:SimpleBet",
        "label": "userBalances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Bet)4337_storage)dyn_storage": {
        "base": "t_struct(Bet)4337_storage",
        "encoding": "dynamic_array",
        "label": "struct SimpleBet.Bet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(BetOutcome)4315": {
        "encoding": "inplace",
        "label": "enum SimpleBet.BetOutcome",
        "numberOfBytes": "1"
      },
      "t_enum(BetStatus)4320": {
        "encoding": "inplace",
        "label": "enum SimpleBet.BetStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bet)4337_storage": {
        "encoding": "inplace",
        "label": "struct SimpleBet.Bet",
        "members": [
          {
            "astId": 4322,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4324,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4326,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4329,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "outcome",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(BetOutcome)4315"
          },
          {
            "astId": 4332,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "status",
            "offset": 1,
            "slot": "3",
            "type": "t_enum(BetStatus)4320"
          },
          {
            "astId": 4334,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "createdAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4336,
            "contract": "contracts/SimpleBet.sol:SimpleBet",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}